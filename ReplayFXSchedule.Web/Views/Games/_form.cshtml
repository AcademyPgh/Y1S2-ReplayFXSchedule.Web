@model ReplayFXSchedule.Web.Models.Game

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="row">
        <label class="col-md-2 col-form-label">Game Types</label>
        <div class="col-md-10">
            <div class="form-group">
                <select class="form-control" typeof="text" name="gametype" id="gametype">
                    @foreach (var gametype in ViewBag.GameTypes)
                    {
                        var selected = "";
                        if (Model != null && Model.GameType.Id == gametype.Id)
                        {
                            selected = "selected";
                        }
                        <option value="@gametype.Id" label="@gametype.Name" @selected>@gametype.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.GameTitle, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-4">
            <div class="form-group">
                @Html.EditorFor(model => model.GameTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GameTitle, "", new { @class = "text-danger" })
                <div class="btn btn-default" id="lookup-game">Lookup Game</div>

            </div>
        </div>
        <div class="col-md-1">
            <label>Game Lookup</label>
        </div>
        <div class="col-md-5">
            <div id="games-display">
                <ul id="games-by-id" class="list-unstyled form-group">
                    <li class="list-group-item form-control">None Found</li>
                </ul>
                <div class="btn btn-default" id="clear-games">Clear Lookup List</div>
            </div>
        </div>
    </div>
    <div class="row">

    </div>
    <div class="row">
        @Html.LabelFor(model => model.Overview, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.TextAreaFor(model => model.Overview, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Overview, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.AtConvention, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10 form-group">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" data-val="true" name="AtConvention" value="true" @(Model != null && Model.AtConvention ? "checked" : "")>
                    &nbsp;
                    <span class="form-check-sign">
                        <span class="check"></span>
                    </span>
                </label>
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Developer, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.Developer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Developer, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.Genre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Genre, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Players, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.Players, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Players, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        <label class="col-md-2 col-form-label">Locations</label>
        <div class="col-md-10">
            <div class="form-group">
                <div class="form-control">
                    <ul id="GameLocations" class="list-unstyled"></ul>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="fileinput-new thumbnail" style="width: 200px; height: 200px;">
                        @if (Model != null && Model.ImageUrl != null)
                        {
                            <img src="@Url.Content(Model.ImageUrl)" class="photo" id="imageUrl" alt="..." />
                        }
                        else
                        {
                            <img src="/content/img/400x400.png" class="photo" id="imageUrl" alt="...">
                        }
                    </div>
                    <div class="fileinput-preview fileinput-exists thumbnail" style="max-width: 200px; max-height: 150px;"></div>
                    <div>
                        <span class="btn btn-default btn-file"><span class="fileinput-new">Select image</span><span class="fileinput-exists">Change</span><input type="file" name="upload"></span>
                        <a href="#" class="btn btn-default fileinput-exists" data-dismiss="fileinput">Original</a>
                        <div class="btn btn-default fileinput-new" id="delete-image">Remove Image</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-offset-2 col-md-10">
            <div class="form-group">
                @Html.HiddenFor(model => model.Image)
                <input name="locations" id="locations" type="hidden" />
                <input type="submit" value="Save" class="btn btn-primary" />
                @Html.ActionLink("Back to List", "Index", "Games", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
</div>