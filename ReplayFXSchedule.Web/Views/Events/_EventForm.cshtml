@model ReplayFXSchedule.Web.Models.Event

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="row">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.TextBoxFor(model => model.Date, new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.TextBoxFor(model => model.StartTime, new { @class = "form-control timepicker" })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.TextBoxFor(model => model.EndTime, new { @class = "form-control timepicker" })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.IsPrivate, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10 form-group">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" data-val="true" name="IsPrivate" value="true" @(Model != null && Model.IsPrivate ? "checked" : "")>
                    &nbsp;
                    <span class="form-check-sign">
                        <span class="check"></span>
                    </span>
                </label>
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.ExtendedDescription, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                @Html.EditorFor(model => model.ExtendedDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExtendedDescription, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="fileinput-new thumbnail" style="width: 200px; height: 200px;">
                        @if (Model != null && Model.ImageUrl != null)
                        {
                            <img src="@Url.Content(Model.ImageUrl)" class="photo" id="imageUrl" alt="..." />
                        }
                        else
                        {
                            <img src="/content/img/400x400.png" class="photo" id="imageUrl" alt="...">
                        }
                    </div>
                    <div class="fileinput-preview fileinput-exists thumbnail" style="max-width: 200px; max-height: 150px;"></div>
                    <div>
                        <span class="btn btn-default btn-file"><span class="fileinput-new">Select image</span><span class="fileinput-exists">Change</span><input type="file" name="upload"></span>
                        <a href="#" class="btn btn-default fileinput-exists" data-dismiss="fileinput">Original</a>
                        <div class="btn btn-default fileinput-new" id="delete-image">Remove Image</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <label class="col-md-2 col-form-label">Categories</label>
        <div class="col-md-10">
            <div class="form-group">
                <div class="form-control">
                    <ul id="EventTypes" class="list-unstyled"></ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.IsPromo, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10 form-group">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" data-val="true" name="IsPromo" value="true" @(Model != null && Model.IsPromo ? "checked" : "")>
                    &nbsp;
                    <span class="form-check-sign">
                        <span class="check"></span>
                    </span>
                </label>
            </div>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.PromoImage, htmlAttributes: new { @class = "col-md-2 col-form-label" })
        <div class="col-md-10">
            <div class="form-group">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="fileinput-new thumbnail" style="width: 200px; height: 200px;">
                        @if (Model != null && Model.PromoImageUrl != null)
                        {
                            <img src="@Url.Content(Model.PromoImageUrl)" class="photo" id="promoImageUrl" alt="..." />
                        }
                        else
                        {
                            <img src="~/content/img/640x170.png" class="photo" id="promoImageUrl" alt="...">
                        }
                    </div>
                    <div class="fileinput-preview fileinput-exists thumbnail" style="max-width: 200px; max-height: 66px;"></div>
                    <div>
                        <span class="btn btn-default btn-file"><span class="fileinput-new">Select image</span><span class="fileinput-exists">Change</span><input type="file" name="promoUpload"></span>
                        <a href="#" class="btn btn-default fileinput-exists" data-dismiss="fileinput">Original</a>
                        <div class="btn btn-default fileinput-new" id="delete-promoimage">Remove Image</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-offset-2 col-md-10">
            <div class="form-group">
                <input name="categories" id="categories" type="hidden" />
                @Html.HiddenFor(model => model.Image)
                @Html.HiddenFor(model => model.PromoImage)
                <input type="submit" value="@((string)ViewContext.RouteData.Values["action"] == "Create" ? "Create" : "Save Changes")" class="btn btn-default btn-primary" />

                @Html.ActionLink("Back to List", "Index", "Events", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
</div>
